# -*- coding: utf-8 -*-
"""1ÂºP.S.O.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wLlMBdJie1SpKK7oo8zUILOUAwCw-UBU
"""

import numpy as np
from random import random,seed
import math

def sphere(x):
  d=x.shape[0]
  sum=0
  for n in range(d):
    sum=sum + x[n]**2
  return sum

s=10
n=2
max_v=5
ini_v=max_v/10
w0=0.9
wf=0.1
maxitter=50
slope=(wf-w0)/maxitter
c1=2
c2=2
w=w0

x=np.zeros((s,n))
y=np.zeros((s,n))
v=np.zeros((s,n))

f_ind=1e10*np.ones((s,1))
fx = np.zeros((s,1))

x_max=8.0
x_min=-8.0


for i in range(s):
  for j in range(n):
    x[i,j]=x_min + (x_max-x_min)*random()
    y[i,j]=1e10
    v[i,j]=ini_v



t = 0
while t < maxitter:

  for i in range(s):
    fx[i,0]=sphere(x[i,:])
    if fx[i,0]<f_ind[i,0]:
      y[i,:]=x[i,:]
      f_ind[i,0]=fx[i,0]
  
  bestfitness=np.amin(f_ind)
  result = np.where(f_ind == np.amin(f_ind))
  ys=y[result[0],:]

  for j in range(n):
    for i in range(s):
      r1=random()
      r2=random()
      v[i,j]=w*v[i,j] + c1*r1*(y[i,j]-x[i,j]) + c2*r2*(ys[0,j]-x[i,j])

      if math.fabs(v[i,j])>max_v:
        if v[i,j]>0:
          v[i,j]= max_v
        else:
          v[i,j]= -max_v
      x[i,j]=x[i,j]+v[i,j]         


  t=t+1
  w=w+slope
  
print(f_ind)
#best results found by particles f_ind
#best solution sphere(ys[0,:])
#position at best solution ys
print(ys)

